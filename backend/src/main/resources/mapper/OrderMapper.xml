<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.gallery.backend.mapper.OrderMapper">
    <resultMap id="OrderResultMap" type="com.example.gallery.backend.dto.Order">
        <id property="id" column="id" />
        <result property="memberId" column="member_id"/>
        <result property="name" column="name"/>
        <result property="address" column="address"/>
        <result property="payment" column="payment"/>
        <result property="items" column="items"/>

        <collection property="itemList"
                    javaType="java.util.ArrayList"
                    ofType="com.example.gallery.backend.dto.OrderItem">
            <result property="orderId" column="orderId"/>
            <result property="itemId" column="itemId"/>
            <result property="itemName" column="itemName"/>
            <result property="priceAtOrder" column="priceAtOrder"/>
            <result property="discountPer" column="discountPer"/>
            <result property="quantity" column="quantity"/>
            <result property="createdAt" column="created_at"/>
        </collection>
    </resultMap>
    
    
    <!-- 회원 ID로 주문 리스트 가져오기 (ID 내림차순 정렬) -->
    <select id="findByMemberIdOrderByIdDesc" resultMap="OrderResultMap">
        SELECT
            o.id
             , o.member_id
             , o.name
             , o.address
             , o.payment
             , o.items
             , i.order_id AS orderId
             , i.item_id AS itemId
             , i.item_name AS itemName
             , i.price_at_order AS priceAtOrder
             , i.discount_per AS discountPer
             , i.quantity
             , i.created_at
         FROM orders AS o
         JOIN order_items AS i
           ON o.id = i.order_id
        WHERE o.member_id = #{memberId}
        ORDER BY o.id DESC
    </select>

    <!-- 주문을 저장하는 insert 쿼리 -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="com.example.gallery.backend.dto.Order">
        INSERT INTO orders (member_id, name, address, payment, card_number, items)
        VALUES (#{memberId}, #{name}, #{address}, #{payment}, #{cardNumber}, #{items})
    </insert>

    <!-- 전체 주문 검색 (ID 내림차순 정렬) -->
    <select id="findAllOrder" resultMap="OrderResultMap">
        SELECT
            o.id
            , o.member_id
            , o.name
            , o.address
            , o.payment
            , o.items
            , i.order_id AS orderId
            , i.item_id AS itemId
            , i.item_name AS itemName
            , i.price_at_order AS priceAtOrder
            , i.discount_per AS discountPer
            , i.quantity
            , i.created_at AS createdAt
        FROM orders AS o
        JOIN order_items AS i
        ON o.id = i.order_id
        ORDER BY o.id DESC
    </select>

    <!-- orders 테이블의 items값을 order_items에 파싱 후 저장 -->
    <insert id="saveOrderItems">
        INSERT INTO order_items (
        order_id, item_id, item_name, price_at_order, quantity, discount_per, created_at
        )
        VALUES
        <foreach collection="items" item="item" separator=",">
            (#{orderId}, #{item.itemId}, #{item.itemName}, #{item.priceAtOrder}, #{item.quantity}, #{item.discountPer}, NOW())
        </foreach>
    </insert>

    <!-- 상품별 TOP5 조회 -->
    <select id="findTopProducts" resultType="map">
        SELECT *
        FROM (
            SELECT
                item_id,
                item_name,
                SUM(quantity) AS total_quantity,
                SUM(price_at_order * (1 - discount_per / 100) * quantity) AS total_sales,
                ROW_NUMBER() OVER (ORDER BY SUM(price_at_order * (1 - discount_per / 100) * quantity) DESC) AS row_num
            FROM order_items
            GROUP BY item_id, item_name
        ) ranked
        WHERE row_num &lt;= 5
        ORDER BY total_sales DESC;
    </select>

</mapper>
